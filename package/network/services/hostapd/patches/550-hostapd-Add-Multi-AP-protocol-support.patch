From 933fbb8d6afecf3d3e021e83cec33ba004c7f012 Mon Sep 17 00:00:00 2001
From: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Date: Mon, 19 Nov 2018 00:18:58 +0200
Subject: [PATCH] hostapd: Add Multi-AP protocol support

The purpose of Multi-AP specification is to enable inter-operability
across Wi-Fi access points (APs) from different vendors.

This patch introduces one new configuration parameter 'multi_ap' to
enable Multi-AP functionality and to configure the BSS as a backhaul
and/or fronthaul BSS.

Advertise vendor specific Multi-AP capabilities in (Re)Association
Response frame, if the user enables Multi-AP functionality through
a configuration parameter and if the STA advertises Multi-AP in the
(Re)Assocation Request.

A backhaul AP must support receiving both 3addr and 4addr frames from a
backhaul STA, so create a VLAN for it just like is done for WDS, i.e.
by calling hostapd_set_wds_sta(). Since Multi-AP requires WPA2 (never
WEP), we can safely call hostapd_set_wds_encryption() as well and we
can reuse the entire WDS condition.

To parse the Multi-AP Extension subelement, we use get_ie(): even
though that function is meant for parsing IEs, it works for subelements
as well since they also have a 1-byte type and 1-byte length.

Signed-off-by: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
Signed-off-by: Jouni Malinen <jouni@codeaurora.org>
---
v2 [Arnout]:
- Rename multi_ap_enabled -> multi_ap
- Rewrite hostapd_validate_multi_ap_ie() to make it similar to the other
  check_*() functions:
  - condition on conf is moved inside the function;
  - takes multi_ap and multi_ap_len as arguments;
  - rename to check_multi_ap();
  - log invalid Multi-AP IE (but treat it as success).
- Remove struct multi_ap_ie since the contents is a list of attributes
  so it can't be mapped on a single struct.
  - check_multi_ap() uses get_ie() instead of casting to
    struct multi_ap_ie;
  - in hostapd_eid_multi_ap(), construct directly into eid.
- Don't check length in ieee802_11_parse_vendor_specific(), since it
  is already checked in get_ie().
- Factor out add_multi_ap_ie() so it can be used in later patches.
- Extend the commit message.

Supersedes: https://patchwork.ozlabs.org/patch/999588/
---
 hostapd/Makefile               |  4 +++
 hostapd/config_file.c          | 13 ++++++++
 hostapd/defconfig              |  3 ++
 hostapd/hostapd.conf           |  7 +++++
 src/ap/ap_config.h             |  4 +++
 src/ap/ieee802_11.c            | 54 +++++++++++++++++++++++++++++++++-
 src/ap/sta_info.c              |  2 +-
 src/ap/sta_info.h              |  1 +
 src/common/ieee802_11_common.c | 26 ++++++++++++++++
 src/common/ieee802_11_common.h |  6 ++++
 src/common/ieee802_11_defs.h   |  8 +++++
 11 files changed, 126 insertions(+), 2 deletions(-)

diff --git a/hostapd/Makefile b/hostapd/Makefile
index ed119306a..8913a8809 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -62,6 +62,10 @@ CFLAGS += -DCONFIG_NATIVE_WINDOWS
 LIBS += -lws2_32
 endif
 
+ifdef CONFIG_MULTI_AP
+CFLAGS += -DCONFIG_MULTI_AP
+endif
+
 OBJS += main.o
 OBJS += config_file.o
 
diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 651887585..28894a98b 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4007,6 +4007,19 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 #endif /* CONFIG_OWE */
+#ifdef CONFIG_MULTI_AP
+	} else if (os_strcmp(buf, "multi_ap") == 0) {
+		int val = atoi(pos);
+
+		if (val > 3 || val < 0) {
+			wpa_printf(MSG_ERROR,
+				   "Line %d: Invalid multi_ap '%s'",
+				   line, buf);
+			return -1;
+		}
+
+		bss->multi_ap = val;
+#endif /*CONFIG_MULTI_AP */
 	} else {
 		wpa_printf(MSG_ERROR,
 			   "Line %d: unknown configuration item '%s'",
diff --git a/hostapd/defconfig b/hostapd/defconfig
index c67c6622d..7746c13cf 100644
--- a/hostapd/defconfig
+++ b/hostapd/defconfig
@@ -373,3 +373,6 @@ CONFIG_IPV6=y
 # Override default value for the wpa_disable_eapol_key_retries configuration
 # parameter. See that parameter in hostapd.conf for more details.
 #CFLAGS += -DDEFAULT_WPA_DISABLE_EAPOL_KEY_RETRIES=1
+
+#Multi-AP protocol support
+#CONFIG_MULTI_AP=y
diff --git a/hostapd/hostapd.conf b/hostapd/hostapd.conf
index 64dd8c28b..77aefaeb7 100644
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -438,6 +438,13 @@ wmm_ac_vo_txop_limit=47
 wmm_ac_vo_acm=0
 # Note: for IEEE 802.11b mode: cWmin=3 cWmax=4 burst=102
 
+#Enable Multi-AP functionality.
+#0:default
+#1:Enable Multi-AP as BACKHAUL_BSS
+#2:Enable Multi-AP as FRONTHAUL_BSS
+#3:Enable Multi-AP as BACKHAUL_BSS and FRONTHAUL_BSS
+#multi_ap=0
+
 # Static WEP key configuration
 #
 # The key number to use when transmitting.
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 9f8b1fa55..3910dfe13 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -682,6 +682,10 @@ struct hostapd_bss_config {
 	char owe_transition_ifname[IFNAMSIZ + 1];
 	int *owe_groups;
 #endif /* CONFIG_OWE */
+
+#ifdef CONFIG_MULTI_AP
+	int multi_ap;
+#endif /*CONFIG_MULTI_AP */
 };
 
 /**
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 6bb94e374..255074a44 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -62,6 +62,24 @@ prepare_auth_resp_fils(struct hostapd_data *hapd,
 		       int *is_pub);
 #endif /* CONFIG_FILS */
 
+#ifdef CONFIG_MULTI_AP
+u8 * hostapd_eid_multi_ap(struct hostapd_data *hapd, u8 *eid)
+{
+	u8 multi_ap_val = 0;
+	int multi_ap = hapd->conf->multi_ap;
+
+	if (!multi_ap)
+		return eid;
+
+	if (multi_ap & BACKHAUL_BSS)
+		multi_ap_val |= MULTI_AP_BACKHAUL_BSS;
+	if (multi_ap & FRONTHAUL_BSS)
+		multi_ap_val |= MULTI_AP_FRONTHAUL_BSS;
+
+	return eid + add_multi_ap_ie(eid, 9, multi_ap_val);
+}
+#endif /* CONFIG_MULTI_AP */
+
 u8 * hostapd_eid_supp_rates(struct hostapd_data *hapd, u8 *eid)
 {
 	u8 *pos = eid;
@@ -2193,6 +2211,28 @@ static u16 check_wmm(struct hostapd_data *hapd, struct sta_info *sta,
 	return WLAN_STATUS_SUCCESS;
 }
 
+#ifdef CONFIG_MULTI_AP
+static u16 check_multi_ap(struct hostapd_data *hapd, struct sta_info *sta,
+					const u8 *multi_ap_ie, size_t multi_ap_len)
+{
+	sta->flags &= ~WLAN_STA_MULTI_AP;
+
+	if (hapd->conf->multi_ap && multi_ap_ie) {
+		const u8 *multi_ap_subelem = get_ie(multi_ap_ie + 4, multi_ap_len - 4,
+						    MULTI_AP_SUB_ELEM_TYPE);
+		if (multi_ap_subelem &&
+		    multi_ap_subelem[1] == 1 &&
+		    multi_ap_subelem[2] == MULTI_AP_BACKHAUL_STA)
+			sta->flags |= WLAN_STA_MULTI_AP;
+		else
+			hostapd_logger(hapd, sta->addr,
+				       HOSTAPD_MODULE_IEEE80211,
+				       HOSTAPD_LEVEL_DEBUG,
+				       "Multi-AP IE has missing or invalid Multi-AP subelement");
+	}
+	return WLAN_STATUS_SUCCESS;
+}
+#endif /* CONFIG_MULTI_AP */
 
 static u16 copy_supp_rates(struct hostapd_data *hapd, struct sta_info *sta,
 			   struct ieee802_11_elems *elems)
@@ -2449,6 +2489,13 @@ static u16 check_assoc_ies(struct hostapd_data *hapd, struct sta_info *sta,
 	resp = copy_supp_rates(hapd, sta, &elems);
 	if (resp != WLAN_STATUS_SUCCESS)
 		return resp;
+
+#ifdef CONFIG_MULTI_AP
+	resp = check_multi_ap(hapd, sta, elems.multi_ap, elems.multi_ap_len);
+	if (resp != WLAN_STATUS_SUCCESS)
+	    return resp;
+#endif /* CONFIG_MULTI_AP */
+
 #ifdef CONFIG_IEEE80211N
 	resp = copy_sta_ht_capab(hapd, sta, elems.ht_capabilities);
 	if (resp != WLAN_STATUS_SUCCESS)
@@ -2968,6 +3015,11 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 	}
 #endif /* CONFIG_WPS */
 
+#ifdef CONFIG_MULTI_AP
+	if (sta && (sta->flags & WLAN_STA_MULTI_AP))
+		p = hostapd_eid_multi_ap(hapd, p);
+#endif
+
 #ifdef CONFIG_P2P
 	if (sta && sta->p2p_ie && hapd->p2p_group) {
 		struct wpabuf *p2p_resp_ie;
@@ -4216,7 +4268,7 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		sta->flags |= WLAN_STA_WDS;
 	}
 
-	if (sta->flags & WLAN_STA_WDS) {
+	if (sta->flags & (WLAN_STA_WDS | WLAN_STA_MULTI_AP)) {
 		int ret;
 		char ifname_wds[IFNAMSIZ + 1];
 
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index 8e7c19656..8ed562648 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -166,7 +166,7 @@ void ap_free_sta(struct hostapd_data *hapd, struct sta_info *sta)
 	/* just in case */
 	ap_sta_set_authorized(hapd, sta, 0);
 
-	if (sta->flags & WLAN_STA_WDS)
+	if (sta->flags & (WLAN_STA_WDS | WLAN_STA_MULTI_AP))
 		hostapd_set_wds_sta(hapd, NULL, sta->addr, sta->aid, 0);
 
 	if (sta->ipaddr)
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index 0459549eb..b8f318ab9 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -36,6 +36,7 @@
 #define WLAN_STA_VHT_OPMODE_ENABLED BIT(20)
 #define WLAN_STA_VENDOR_VHT BIT(21)
 #define WLAN_STA_PENDING_FILS_ERP BIT(22)
+#define WLAN_STA_MULTI_AP BIT(23)
 #define WLAN_STA_PENDING_DISASSOC_CB BIT(29)
 #define WLAN_STA_PENDING_DEAUTH_CB BIT(30)
 #define WLAN_STA_NONERP BIT(31)
diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index e1ef27795..32afe1c08 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -126,6 +126,10 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 			elems->roaming_cons_sel = pos;
 			elems->roaming_cons_sel_len = elen;
 			break;
+		case MULTI_AP_OUI_TYPE:
+			elems->multi_ap = pos;
+			elems->multi_ap_len = elen;
+			break;
 		default:
 			wpa_printf(MSG_MSGDUMP, "Unknown WFA "
 				   "information element ignored "
@@ -1519,6 +1523,28 @@ size_t mbo_add_ie(u8 *buf, size_t len, const u8 *attr, size_t attr_len)
 }
 
 
+#ifdef CONFIG_MULTI_AP
+size_t add_multi_ap_ie(u8 *buf, size_t len, u8 value)
+{
+	u8 *pos = buf;
+
+	if (len < 9)
+		return 0;
+
+	*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+	*pos++ = 7; /* len */
+	WPA_PUT_BE24(pos, OUI_WFA);
+	pos += 3;
+	*pos++ = MULTI_AP_OUI_TYPE;
+	*pos++ = MULTI_AP_SUB_ELEM_TYPE;
+	*pos++ = 1; /* len */
+	*pos++ = value;
+
+	return pos - buf;
+}
+#endif /* CONFIG_MULTI_AP */
+
+
 static const struct country_op_class us_op_class[] = {
 	{ 1, 115 },
 	{ 2, 118 },
diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index ff7e51de3..0d78ea989 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -84,6 +84,7 @@ struct ieee802_11_elems {
 	const u8 *power_capab;
 	const u8 *roaming_cons_sel;
 	const u8 *password_id;
+	const u8 *multi_ap;
 
 	u8 ssid_len;
 	u8 supp_rates_len;
@@ -130,6 +131,7 @@ struct ieee802_11_elems {
 	u8 power_capab_len;
 	u8 roaming_cons_sel_len;
 	u8 password_id_len;
+	u8 multi_ap_len;
 
 	struct mb_ies_info mb_ies;
 };
@@ -189,6 +191,10 @@ const u8 * get_ie_ext(const u8 *ies, size_t len, u8 ext);
 
 size_t mbo_add_ie(u8 *buf, size_t len, const u8 *attr, size_t attr_len);
 
+#ifdef CONFIG_MULTI_AP
+size_t add_multi_ap_ie(u8 *buf, size_t len, u8 value);
+#endif
+
 struct country_op_class {
 	u8 country_op_class;
 	u8 global_op_class;
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 7e3d8dbc1..7f91283f4 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -1201,6 +1201,14 @@ struct ieee80211_ampe_ie {
 #define OWE_IE_VENDOR_TYPE 0x506f9a1c
 #define OWE_OUI_TYPE 28
 
+#define MULTI_AP_OUI_TYPE 0x1B
+#define MULTI_AP_SUB_ELEM_TYPE 0x06
+#define MULTI_AP_BACKHAUL_STA 0x80
+#define MULTI_AP_BACKHAUL_BSS 0x40
+#define MULTI_AP_FRONTHAUL_BSS 0x20
+#define BACKHAUL_BSS 1
+#define FRONTHAUL_BSS 2
+
 #define WMM_OUI_TYPE 2
 #define WMM_OUI_SUBTYPE_INFORMATION_ELEMENT 0
 #define WMM_OUI_SUBTYPE_PARAMETER_ELEMENT 1
-- 
2.19.1

